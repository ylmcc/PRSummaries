import { createUnauthenticatedAuth } from "@octokit/auth-unauthenticated";
async function auth(state, options) {
  if (options.type !== "event-octokit") {
    if (state.type === "token" && options.type === "installation" && options.factory) {
      const { type, factory, ...factoryAuthOptions } = options;
      return factory(
        Object.assign({}, factoryAuthOptions, {
          octokit: state.octokit,
          octokitOptions: state.octokitOptions
        })
      );
    }
    return state.auth(options);
  }
  if (state.type !== "app") {
    return state.octokit;
  }
  const action = options.event.payload.action;
  const installationId = options.event.payload.installation && options.event.payload.installation.id;
  const fullEventName = options.event.name + (action ? "." + action : "");
  const OctokitWithEventAuth = state.octokit.constructor;
  if (!installationId) {
    const { auth: auth2, ...octokitOptions } = state.octokitOptions;
    return new OctokitWithEventAuth({
      authStrategy: createUnauthenticatedAuth,
      auth: {
        reason: `Handling a "${fullEventName}" event: an "installation" key is missing. The installation ID cannot be determined`
      },
      ...octokitOptions
    });
  }
  if (options.event.name === "installation" && ["suspend", "deleted"].includes(String(action))) {
    const { auth: auth2, ...octokitOptions } = state.octokitOptions;
    return new OctokitWithEventAuth({
      authStrategy: createUnauthenticatedAuth,
      auth: {
        reason: `Handling a "${fullEventName}" event: The app's access has been revoked from @octokit (id: ${installationId})`
      },
      ...octokitOptions
    });
  }
  return state.auth({
    type: "installation",
    installationId,
    factory: (auth2) => {
      const options2 = Object.assign({}, state.octokitOptions, {
        auth: Object.assign({}, auth2, {
          installationId
        })
      });
      return new OctokitWithEventAuth(options2);
    }
  });
}
export {
  auth
};
