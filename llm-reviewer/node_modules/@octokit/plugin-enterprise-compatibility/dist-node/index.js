"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pkg/dist-src/index.js
var dist_src_exports = {};
__export(dist_src_exports, {
  enterpriseCompatibility: () => enterpriseCompatibility
});
module.exports = __toCommonJS(dist_src_exports);
var import_request_error = require("@octokit/request-error");

// pkg/dist-src/version.js
var VERSION = "4.1.0";

// pkg/dist-src/index.js
function enterpriseCompatibility(octokit) {
  octokit.hook.wrap("request", async (request, options) => {
    if (/\/orgs\/[^/]+\/teams/.test(options.url)) {
      try {
        return await request(options);
      } catch (error) {
        if (error.status !== 404) {
          throw error;
        }
        if (!error.response || !error.response.headers["x-github-enterprise-version"]) {
          throw error;
        }
        const deprecatedUrl = options.url.replace(
          /\/orgs\/[^/]+\/teams\/[^/]+/,
          "/teams/{team_id}"
        );
        throw new import_request_error.RequestError(
          `"${options.method} ${options.url}" is not supported in your GitHub Enterprise Server version. Please replace with octokit.request("${options.method} ${deprecatedUrl}", { team_id })`,
          404,
          {
            request: options
          }
        );
      }
    }
    return request(options);
  });
}
enterpriseCompatibility.VERSION = VERSION;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  enterpriseCompatibility
});
