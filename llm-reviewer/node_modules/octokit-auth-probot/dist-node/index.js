"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pkg/dist-src/index.js
var dist_src_exports = {};
__export(dist_src_exports, {
  createProbotAuth: () => createProbotAuth
});
module.exports = __toCommonJS(dist_src_exports);

// pkg/dist-src/auth.js
var import_auth_unauthenticated = require("@octokit/auth-unauthenticated");
async function auth(state, options) {
  if (options.type !== "event-octokit") {
    if (state.type === "token" && options.type === "installation" && options.factory) {
      const { type, factory, ...factoryAuthOptions } = options;
      return factory(
        Object.assign({}, factoryAuthOptions, {
          octokit: state.octokit,
          octokitOptions: state.octokitOptions
        })
      );
    }
    return state.auth(options);
  }
  if (state.type !== "app") {
    return state.octokit;
  }
  const action = options.event.payload.action;
  const installationId = options.event.payload.installation && options.event.payload.installation.id;
  const fullEventName = options.event.name + (action ? "." + action : "");
  const OctokitWithEventAuth = state.octokit.constructor;
  if (!installationId) {
    const { auth: auth2, ...octokitOptions } = state.octokitOptions;
    return new OctokitWithEventAuth({
      authStrategy: import_auth_unauthenticated.createUnauthenticatedAuth,
      auth: {
        reason: `Handling a "${fullEventName}" event: an "installation" key is missing. The installation ID cannot be determined`
      },
      ...octokitOptions
    });
  }
  if (options.event.name === "installation" && ["suspend", "deleted"].includes(String(action))) {
    const { auth: auth2, ...octokitOptions } = state.octokitOptions;
    return new OctokitWithEventAuth({
      authStrategy: import_auth_unauthenticated.createUnauthenticatedAuth,
      auth: {
        reason: `Handling a "${fullEventName}" event: The app's access has been revoked from @octokit (id: ${installationId})`
      },
      ...octokitOptions
    });
  }
  return state.auth({
    type: "installation",
    installationId,
    factory: (auth2) => {
      const options2 = Object.assign({}, state.octokitOptions, {
        auth: Object.assign({}, auth2, {
          installationId
        })
      });
      return new OctokitWithEventAuth(options2);
    }
  });
}

// pkg/dist-src/get-state.js
var import_auth_token = require("@octokit/auth-token");
var import_auth_app = require("@octokit/auth-app");
var import_auth_unauthenticated2 = require("@octokit/auth-unauthenticated");
function getState(options) {
  const common = {
    octokit: options.octokit,
    octokitOptions: options.octokitOptions
  };
  if ("token" in options) {
    return {
      type: "token",
      auth: (0, import_auth_token.createTokenAuth)(String(options.token)),
      ...common
    };
  }
  if ("appId" in options && "privateKey" in options) {
    return {
      type: "app",
      auth: (0, import_auth_app.createAppAuth)(options),
      ...common
    };
  }
  return {
    type: "unauthenticated",
    auth: (0, import_auth_unauthenticated2.createUnauthenticatedAuth)({
      reason: `Neither "appId"/"privateKey" nor "token" have been set as auth options`
    }),
    ...common
  };
}

// pkg/dist-src/version.js
var VERSION = "0.0.0-development";

// pkg/dist-src/index.js
function createProbotAuth(options) {
  const state = getState(options);
  return Object.assign(auth.bind(null, state), {
    hook: state.auth.hook
  });
}
createProbotAuth.VERSION = VERSION;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createProbotAuth
});
