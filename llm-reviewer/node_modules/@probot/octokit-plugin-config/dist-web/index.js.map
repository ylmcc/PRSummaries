{
  "version": 3,
  "sources": ["../dist-src/index.js", "../dist-src/version.js", "../dist-src/compose-config-get.js", "../dist-src/util/get-config-files.js", "../dist-src/util/get-config-file.js", "../dist-src/util/extends-to-get-content-params.js"],
  "sourcesContent": ["import { Octokit } from \"@octokit/core\";\nimport { VERSION } from \"./version\";\nimport { composeConfigGet } from \"./compose-config-get\";\nfunction config(octokit) {\n  return {\n    config: {\n      async get(options) {\n        return composeConfigGet(octokit, options);\n      }\n    }\n  };\n}\nconfig.VERSION = VERSION;\nimport { composeConfigGet as composeConfigGet2 } from \"./compose-config-get\";\nexport {\n  composeConfigGet2 as composeConfigGet,\n  config\n};\n", "const VERSION = \"2.0.1\";\nexport {\n  VERSION\n};\n", "import { Octokit } from \"@octokit/core\";\nimport { getConfigFiles } from \"./util/get-config-files\";\nasync function composeConfigGet(octokit, { owner, repo, defaults, path, branch }) {\n  const files = await getConfigFiles(octokit, {\n    owner,\n    repo,\n    path,\n    branch\n  });\n  const configs = files.map((file) => file.config).reverse().filter(Boolean);\n  return {\n    files,\n    config: typeof defaults === \"function\" ? defaults(configs) : Object.assign({}, defaults, ...configs)\n  };\n}\nexport {\n  composeConfigGet\n};\n", "import { Octokit } from \"@octokit/core\";\nimport { getConfigFile } from \"./get-config-file\";\nimport { extendsToGetContentParams } from \"./extends-to-get-content-params\";\nasync function getConfigFiles(octokit, { owner, repo, path, branch }) {\n  const requestedRepoFile = await getConfigFile(octokit, {\n    owner,\n    repo,\n    path,\n    ref: branch\n  });\n  const files = [requestedRepoFile];\n  if (!requestedRepoFile.config) {\n    if (repo === \".github\") {\n      return files;\n    }\n    const defaultRepoConfig = await getConfigFile(octokit, {\n      owner,\n      repo: \".github\",\n      path\n    });\n    files.push(defaultRepoConfig);\n  }\n  const file = files[files.length - 1];\n  if (!file.config || !file.config._extends) {\n    return files;\n  }\n  let extendConfigOptions = extendsToGetContentParams({\n    owner,\n    path,\n    url: file.url,\n    extendsValue: file.config._extends\n  });\n  delete file.config._extends;\n  do {\n    const extendRepoConfig = await getConfigFile(octokit, extendConfigOptions);\n    files.push(extendRepoConfig);\n    if (!extendRepoConfig.config || !extendRepoConfig.config._extends) {\n      return files;\n    }\n    extendConfigOptions = extendsToGetContentParams({\n      owner,\n      path,\n      url: extendRepoConfig.url,\n      extendsValue: extendRepoConfig.config._extends\n    });\n    delete extendRepoConfig.config._extends;\n    const alreadyLoaded = files.find(\n      (file2) => file2.owner === extendConfigOptions.owner && file2.repo === extendConfigOptions.repo && file2.path === extendConfigOptions.path\n    );\n    if (alreadyLoaded) {\n      throw new Error(\n        `[@probot/octokit-plugin-config] Recursion detected. Ignoring  \"_extends: ${extendRepoConfig.config._extends}\" from ${extendRepoConfig.url} because ${alreadyLoaded.url} was already loaded.`\n      );\n    }\n  } while (true);\n}\nexport {\n  getConfigFiles\n};\n", "import { Octokit } from \"@octokit/core\";\nimport yaml from \"js-yaml\";\nconst SUPPORTED_FILE_EXTENSIONS = [\"json\", \"yml\", \"yaml\"];\nasync function getConfigFile(octokit, { owner, repo, path, ref }) {\n  const fileExtension = path.split(\".\").pop().toLowerCase();\n  if (!SUPPORTED_FILE_EXTENSIONS.includes(fileExtension)) {\n    throw new Error(\n      `[@probot/octokit-plugin-config] .${fileExtension} extension is not support for configuration (path: \"${path}\")`\n    );\n  }\n  const endpoint = {\n    method: \"GET\",\n    url: \"/repos/{owner}/{repo}/contents/{path}\",\n    owner,\n    repo,\n    path,\n    mediaType: {\n      format: \"raw\"\n    },\n    // this can be just `ref` once https://github.com/octokit/endpoint.js/issues/206 is resolved\n    ...ref ? { ref } : {}\n  };\n  const { url } = await octokit.request.endpoint(endpoint);\n  const emptyConfigResult = {\n    owner,\n    repo,\n    path,\n    url,\n    config: null\n  };\n  try {\n    const { data, headers } = await octokit.request(endpoint);\n    if (headers[\"content-type\"] === \"application/json; charset=utf-8\") {\n      throw new Error(\n        `[@probot/octokit-plugin-config] ${url} exists, but is either a directory or a submodule. Ignoring.`\n      );\n    }\n    if (fileExtension === \"json\") {\n      if (typeof data === \"string\") {\n        throw new Error(\n          `[@probot/octokit-plugin-config] Configuration could not be parsed from ${url} (invalid JSON)`\n        );\n      }\n      return {\n        ...emptyConfigResult,\n        config: data\n      };\n    }\n    const config = yaml.load(data) || {};\n    if (typeof config === \"string\") {\n      throw new Error(\n        `[@probot/octokit-plugin-config] Configuration could not be parsed from ${url} (YAML is not an object)`\n      );\n    }\n    return {\n      ...emptyConfigResult,\n      config\n    };\n  } catch (error) {\n    if (error.status === 404) {\n      return emptyConfigResult;\n    }\n    if (error.name === \"YAMLException\") {\n      const reason = /unknown tag/.test(error.message) ? \"unsafe YAML\" : \"invalid YAML\";\n      throw new Error(\n        `[@probot/octokit-plugin-config] Configuration could not be parsed from ${url} (${reason})`\n      );\n    }\n    throw error;\n  }\n}\nexport {\n  getConfigFile\n};\n", "const EXTENDS_REGEX = new RegExp(\n  \"^(?:([a-z\\\\d](?:[a-z\\\\d]|-(?=[a-z\\\\d])){0,38})/)?([-_.\\\\w\\\\d]+)(?::([-_./\\\\w\\\\d]+\\\\.ya?ml))?$\",\n  \"i\"\n);\nfunction extendsToGetContentParams({\n  owner,\n  path,\n  url,\n  extendsValue\n}) {\n  if (typeof extendsValue !== \"string\") {\n    throw new Error(\n      `[@probot/octokit-plugin-config] Invalid value ${JSON.stringify(\n        extendsValue\n      )} for _extends in ${url}`\n    );\n  }\n  const match = extendsValue.match(EXTENDS_REGEX);\n  if (match === null) {\n    throw new Error(\n      `[@probot/octokit-plugin-config] Invalid value \"${extendsValue}\" for _extends in ${url}`\n    );\n  }\n  return {\n    owner: match[1] || owner,\n    repo: match[2],\n    path: match[3] || path\n  };\n}\nexport {\n  extendsToGetContentParams\n};\n"],
  "mappings": "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",
  "names": ["Octokit", "Octokit", "Octokit", "config"]
}
