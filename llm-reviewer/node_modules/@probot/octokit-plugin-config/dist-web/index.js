// pkg/dist-src/index.js
import { Octokit as Octokit4 } from "@octokit/core";

// pkg/dist-src/version.js
var VERSION = "2.0.1";

// pkg/dist-src/compose-config-get.js
import { Octokit as Octokit3 } from "@octokit/core";

// pkg/dist-src/util/get-config-files.js
import { Octokit as Octokit2 } from "@octokit/core";

// pkg/dist-src/util/get-config-file.js
import { Octokit } from "@octokit/core";
import yaml from "js-yaml";
var SUPPORTED_FILE_EXTENSIONS = ["json", "yml", "yaml"];
async function getConfigFile(octokit, { owner, repo, path, ref }) {
  const fileExtension = path.split(".").pop().toLowerCase();
  if (!SUPPORTED_FILE_EXTENSIONS.includes(fileExtension)) {
    throw new Error(
      `[@probot/octokit-plugin-config] .${fileExtension} extension is not support for configuration (path: "${path}")`
    );
  }
  const endpoint = {
    method: "GET",
    url: "/repos/{owner}/{repo}/contents/{path}",
    owner,
    repo,
    path,
    mediaType: {
      format: "raw"
    },
    // this can be just `ref` once https://github.com/octokit/endpoint.js/issues/206 is resolved
    ...ref ? { ref } : {}
  };
  const { url } = await octokit.request.endpoint(endpoint);
  const emptyConfigResult = {
    owner,
    repo,
    path,
    url,
    config: null
  };
  try {
    const { data, headers } = await octokit.request(endpoint);
    if (headers["content-type"] === "application/json; charset=utf-8") {
      throw new Error(
        `[@probot/octokit-plugin-config] ${url} exists, but is either a directory or a submodule. Ignoring.`
      );
    }
    if (fileExtension === "json") {
      if (typeof data === "string") {
        throw new Error(
          `[@probot/octokit-plugin-config] Configuration could not be parsed from ${url} (invalid JSON)`
        );
      }
      return {
        ...emptyConfigResult,
        config: data
      };
    }
    const config2 = yaml.load(data) || {};
    if (typeof config2 === "string") {
      throw new Error(
        `[@probot/octokit-plugin-config] Configuration could not be parsed from ${url} (YAML is not an object)`
      );
    }
    return {
      ...emptyConfigResult,
      config: config2
    };
  } catch (error) {
    if (error.status === 404) {
      return emptyConfigResult;
    }
    if (error.name === "YAMLException") {
      const reason = /unknown tag/.test(error.message) ? "unsafe YAML" : "invalid YAML";
      throw new Error(
        `[@probot/octokit-plugin-config] Configuration could not be parsed from ${url} (${reason})`
      );
    }
    throw error;
  }
}

// pkg/dist-src/util/extends-to-get-content-params.js
var EXTENDS_REGEX = new RegExp(
  "^(?:([a-z\\d](?:[a-z\\d]|-(?=[a-z\\d])){0,38})/)?([-_.\\w\\d]+)(?::([-_./\\w\\d]+\\.ya?ml))?$",
  "i"
);
function extendsToGetContentParams({
  owner,
  path,
  url,
  extendsValue
}) {
  if (typeof extendsValue !== "string") {
    throw new Error(
      `[@probot/octokit-plugin-config] Invalid value ${JSON.stringify(
        extendsValue
      )} for _extends in ${url}`
    );
  }
  const match = extendsValue.match(EXTENDS_REGEX);
  if (match === null) {
    throw new Error(
      `[@probot/octokit-plugin-config] Invalid value "${extendsValue}" for _extends in ${url}`
    );
  }
  return {
    owner: match[1] || owner,
    repo: match[2],
    path: match[3] || path
  };
}

// pkg/dist-src/util/get-config-files.js
async function getConfigFiles(octokit, { owner, repo, path, branch }) {
  const requestedRepoFile = await getConfigFile(octokit, {
    owner,
    repo,
    path,
    ref: branch
  });
  const files = [requestedRepoFile];
  if (!requestedRepoFile.config) {
    if (repo === ".github") {
      return files;
    }
    const defaultRepoConfig = await getConfigFile(octokit, {
      owner,
      repo: ".github",
      path
    });
    files.push(defaultRepoConfig);
  }
  const file = files[files.length - 1];
  if (!file.config || !file.config._extends) {
    return files;
  }
  let extendConfigOptions = extendsToGetContentParams({
    owner,
    path,
    url: file.url,
    extendsValue: file.config._extends
  });
  delete file.config._extends;
  do {
    const extendRepoConfig = await getConfigFile(octokit, extendConfigOptions);
    files.push(extendRepoConfig);
    if (!extendRepoConfig.config || !extendRepoConfig.config._extends) {
      return files;
    }
    extendConfigOptions = extendsToGetContentParams({
      owner,
      path,
      url: extendRepoConfig.url,
      extendsValue: extendRepoConfig.config._extends
    });
    delete extendRepoConfig.config._extends;
    const alreadyLoaded = files.find(
      (file2) => file2.owner === extendConfigOptions.owner && file2.repo === extendConfigOptions.repo && file2.path === extendConfigOptions.path
    );
    if (alreadyLoaded) {
      throw new Error(
        `[@probot/octokit-plugin-config] Recursion detected. Ignoring  "_extends: ${extendRepoConfig.config._extends}" from ${extendRepoConfig.url} because ${alreadyLoaded.url} was already loaded.`
      );
    }
  } while (true);
}

// pkg/dist-src/compose-config-get.js
async function composeConfigGet(octokit, { owner, repo, defaults, path, branch }) {
  const files = await getConfigFiles(octokit, {
    owner,
    repo,
    path,
    branch
  });
  const configs = files.map((file) => file.config).reverse().filter(Boolean);
  return {
    files,
    config: typeof defaults === "function" ? defaults(configs) : Object.assign({}, defaults, ...configs)
  };
}

// pkg/dist-src/index.js
function config(octokit) {
  return {
    config: {
      async get(options) {
        return composeConfigGet(octokit, options);
      }
    }
  };
}
config.VERSION = VERSION;
export {
  composeConfigGet,
  config
};
