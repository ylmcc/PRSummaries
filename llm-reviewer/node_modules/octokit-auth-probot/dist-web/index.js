// pkg/dist-src/auth.js
import { createUnauthenticatedAuth } from "@octokit/auth-unauthenticated";
async function auth(state, options) {
  if (options.type !== "event-octokit") {
    if (state.type === "token" && options.type === "installation" && options.factory) {
      const { type, factory, ...factoryAuthOptions } = options;
      return factory(
        Object.assign({}, factoryAuthOptions, {
          octokit: state.octokit,
          octokitOptions: state.octokitOptions
        })
      );
    }
    return state.auth(options);
  }
  if (state.type !== "app") {
    return state.octokit;
  }
  const action = options.event.payload.action;
  const installationId = options.event.payload.installation && options.event.payload.installation.id;
  const fullEventName = options.event.name + (action ? "." + action : "");
  const OctokitWithEventAuth = state.octokit.constructor;
  if (!installationId) {
    const { auth: auth2, ...octokitOptions } = state.octokitOptions;
    return new OctokitWithEventAuth({
      authStrategy: createUnauthenticatedAuth,
      auth: {
        reason: `Handling a "${fullEventName}" event: an "installation" key is missing. The installation ID cannot be determined`
      },
      ...octokitOptions
    });
  }
  if (options.event.name === "installation" && ["suspend", "deleted"].includes(String(action))) {
    const { auth: auth2, ...octokitOptions } = state.octokitOptions;
    return new OctokitWithEventAuth({
      authStrategy: createUnauthenticatedAuth,
      auth: {
        reason: `Handling a "${fullEventName}" event: The app's access has been revoked from @octokit (id: ${installationId})`
      },
      ...octokitOptions
    });
  }
  return state.auth({
    type: "installation",
    installationId,
    factory: (auth2) => {
      const options2 = Object.assign({}, state.octokitOptions, {
        auth: Object.assign({}, auth2, {
          installationId
        })
      });
      return new OctokitWithEventAuth(options2);
    }
  });
}

// pkg/dist-src/get-state.js
import { createTokenAuth } from "@octokit/auth-token";
import { createAppAuth } from "@octokit/auth-app";
import { createUnauthenticatedAuth as createUnauthenticatedAuth2 } from "@octokit/auth-unauthenticated";
function getState(options) {
  const common = {
    octokit: options.octokit,
    octokitOptions: options.octokitOptions
  };
  if ("token" in options) {
    return {
      type: "token",
      auth: createTokenAuth(String(options.token)),
      ...common
    };
  }
  if ("appId" in options && "privateKey" in options) {
    return {
      type: "app",
      auth: createAppAuth(options),
      ...common
    };
  }
  return {
    type: "unauthenticated",
    auth: createUnauthenticatedAuth2({
      reason: `Neither "appId"/"privateKey" nor "token" have been set as auth options`
    }),
    ...common
  };
}

// pkg/dist-src/version.js
var VERSION = "0.0.0-development";

// pkg/dist-src/index.js
function createProbotAuth(options) {
  const state = getState(options);
  return Object.assign(auth.bind(null, state), {
    hook: state.auth.hook
  });
}
createProbotAuth.VERSION = VERSION;
export {
  createProbotAuth
};
